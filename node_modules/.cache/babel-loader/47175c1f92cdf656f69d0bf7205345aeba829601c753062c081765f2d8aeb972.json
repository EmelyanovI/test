{"ast":null,"code":"var _jsxFileName = \"/Users/user/Projects/sber/src/index.jsx\";\nimport React, { useState } from 'react';\n\n// Типы данных\n// interface Param {\n//   id: number;\n//   name: string;\n//   type: 'string';\n// }\n\n// interface ParamValue {\n//   paramId: number;\n//   value: string;\n// }\n\n// interface Color {\n//   r: number;\n//   g: number;\n//   b: number;\n//   a?: number;\n// }\n\n// interface Model {\n//   paramValues: ParamValue[];\n//   colors: Color[];\n// }\n\n// interface Props {\n//   params: Param[];\n//   model: Model;\n// }\n\n// interface State {\n//   paramValues: ParamValue[];\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ParamEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleParamValueChange = (paramId, value) => {\n      const {\n        paramValues\n      } = this.state;\n      const index = paramValues.findIndex(pv => pv.paramId === paramId);\n      if (index !== -1) {\n        this.setState(prevState => ({\n          paramValues: prevState.paramValues.map(pv => pv.paramId === paramId ? {\n            ...pv,\n            value\n          } : pv)\n        }));\n      }\n    };\n    this.getModel = () => ({\n      paramValues: this.state.paramValues,\n      colors: this.props.model.colors\n    });\n    this.state = {\n      paramValues: props.model.paramValues\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.props.params.map(param => {\n        var _this$state$paramValu;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `param-${param.id}`,\n            children: [param.name, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            id: `param-${param.id}`,\n            type: \"text\",\n            value: ((_this$state$paramValu = this.state.paramValues.find(pv => pv.paramId === param.id)) === null || _this$state$paramValu === void 0 ? void 0 : _this$state$paramValu.value) || '',\n            onChange: e => this.handleParamValueChange(param.id, e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, param.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n// Пример использования\nconst params = [{\n  id: 1,\n  name: 'Назначение',\n  type: 'string'\n}, {\n  id: 2,\n  name: 'Длина',\n  type: 'string'\n}];\nconst model = {\n  paramValues: [{\n    paramId: 1,\n    value: 'повседневное'\n  }, {\n    paramId: 2,\n    value: 'макси'\n  }],\n  colors: []\n};\nconst App = () => {\n  const [currentModel, setCurrentModel] = useState < Model > model;\n  const handleModelChange = newModel => {\n    setCurrentModel(newModel);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ParamEditor, {\n      params: params,\n      model: currentModel\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(currentModel),\n      children: \"Get Model\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ParamEditor","Component","constructor","props","handleParamValueChange","paramId","value","paramValues","state","index","findIndex","pv","setState","prevState","map","getModel","colors","model","render","children","params","param","_this$state$paramValu","htmlFor","id","name","fileName","_jsxFileName","lineNumber","columnNumber","type","find","onChange","e","target","App","currentModel","setCurrentModel","Model","handleModelChange","newModel","onClick","console","log","_c","$RefreshReg$"],"sources":["/Users/user/Projects/sber/src/index.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\n// Типы данных\n// interface Param {\n//   id: number;\n//   name: string;\n//   type: 'string';\n// }\n\n// interface ParamValue {\n//   paramId: number;\n//   value: string;\n// }\n\n// interface Color {\n//   r: number;\n//   g: number;\n//   b: number;\n//   a?: number;\n// }\n\n// interface Model {\n//   paramValues: ParamValue[];\n//   colors: Color[];\n// }\n\n// interface Props {\n//   params: Param[];\n//   model: Model;\n// }\n\n// interface State {\n//   paramValues: ParamValue[];\n// }\n\nclass ParamEditor extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      paramValues: props.model.paramValues,\n    };\n  }\n\n  handleParamValueChange = (paramId: number, value: string) => {\n    const { paramValues } = this.state;\n    const index = paramValues.findIndex((pv) => pv.paramId === paramId);\n\n    if (index !== -1) {\n      this.setState((prevState) => ({\n        paramValues: prevState.paramValues.map((pv) =>\n          pv.paramId === paramId ? { ...pv, value } : pv\n        ),\n      }));\n    }\n  };\n\n  getModel = (): Model => ({\n    paramValues: this.state.paramValues,\n    colors: this.props.model.colors,\n  });\n\n  render() {\n    return (\n      <div>\n        {this.props.params.map((param) => (\n          <div key={param.id}>\n            <label htmlFor={`param-${param.id}`}>{param.name}:</label>\n            <input\n              id={`param-${param.id}`}\n              type=\"text\"\n              value={\n                this.state.paramValues.find((pv) => pv.paramId === param.id)\n                  ?.value || ''\n              }\n              onChange={(e) => this.handleParamValueChange(param.id, e.target.value)}\n            />\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\n// Пример использования\nconst params: Param[] = [\n  {\n    id: 1,\n    name: 'Назначение',\n    type: 'string',\n  },\n  {\n    id: 2,\n    name: 'Длина',\n    type: 'string',\n  },\n];\n\nconst model: Model = {\n  paramValues: [\n    {\n      paramId: 1,\n      value: 'повседневное',\n    },\n    {\n      paramId: 2,\n      value: 'макси',\n    },\n  ],\n  colors: [],\n};\n\nconst App = () => {\n  const [currentModel, setCurrentModel] = useState<Model>(model);\n\n  const handleModelChange = (newModel: Model) => {\n    setCurrentModel(newModel);\n  };\n\n  return (\n    <div>\n      <ParamEditor params={params} model={currentModel}></ParamEditor>\n      <button onClick={() => console.log(currentModel)}>Get Model</button>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}